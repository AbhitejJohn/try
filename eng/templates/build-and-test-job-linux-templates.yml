parameters:
  buildConfig: 'Release'
  buildArgs: ''
  skipTests: false
  publishArtifacts: false
  enableDiagnosticsAndParallelism: false
  additionalArgs: ''       # Additional arguments to pass to the test command
steps:
- script: git config --global core.longpaths true
  displayName: Enable `git clean` to handle long paths

- checkout: self
  clean: true

- task: NodeTool@0
  displayName: Add NodeJS/npm
  inputs:
    versionSpec: $(NodeJSVersion)

- task: UseDotNet@2
  displayName: Add dotnet
  inputs:
    packageType: sdk
    version: $(DotNetSdkVersion)
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: |
    mkdir -p "$(Build.SourcesDirectory)/artifacts"
    cp eng/resources/* "$(Build.SourcesDirectory)/artifacts"
  displayName: Prevent test directory crawling

- pwsh: |
    $testArg = if ($env:SKIPTESTS -ne "true") { "--test" } else { "" }
    Write-Host "##vso[task.setvariable variable=_TestArgs]$testArg"
  displayName: Promote variables

- script: ./eng/cibuild.sh
    --configuration ${{ parameters.buildConfig }}
    --prepareMachine
    $(_TestArgs)
  displayName: Build
  env:
    POCKETLOGGER_LOG_PATH: $(PocketLoggerLogPath)
    TRYDOTNET_PREBUILDS_PATH: $(TryDotNetPrebuildsPath)

- script: |
    dotnet test -l trx --no-build --blame-hang-timeout 15m --blame-hang-dump-type full -c ${{ parameters.buildConfig }} --results-directory $(Build.SourcesDirectory)/artifacts/TestResults/${{ parameters.buildConfig }} ${{ parameters.additionalArgs }}
  displayName: Test / Blame
  workingDirectory: $(Build.SourcesDirectory)
  condition: ne('${{ parameters.skipTests }}', 'true')
  env:
    RunIntegrationTests: $(RunIntegrationTests)

- pwsh: Get-ChildItem *.dmp -Recurse | Remove-Item
  displayName: Delete dump files
  workingDirectory: $(Build.SourcesDirectory)/artifacts/TestResults/${{ parameters.buildConfig }}
  condition: and(ne(variables['KeepDumps'], 'true'), ne('${{ parameters.skipTests }}', 'true'))

- task: PublishBuildArtifacts@1
  displayName: Publish Linux artifacts
  inputs:
    pathToPublish: $(Build.SourcesDirectory)/artifacts/
    artifactName: Linux_artifacts
    artifactType: container
  condition: ${{ parameters.publishArtifacts }}
